{"name":"Play1-chart","tagline":"Play 1 chart module","body":"Chart\r\n=====\r\n\r\nThe Chart module allows for easy generation of chart images. The\r\nfollowing chart types are supported:\r\n\r\n-   Bar\r\n-   Line\r\n-   Pie\r\n-   Ring\r\n\r\nThe format of the images is PNG.\r\n\r\nThis module makes use of the JFreeChart library.\r\n\r\nQuick example\r\n-------------\r\n\r\n### Controller\r\n\r\n    Map<Comparable, Number> dataset = ArrayUtils.toMap(new Object[][] {\r\n            {\"Slice 1\", 51}, {\"Slice 2\", 49}});\r\n    Chart pieChart = ChartBuilderFactory.newPieChartBuilder(dataset).build();\r\n    render(pieChart);\r\n\r\n### View\r\n\r\n    #{chart.img chart: pieChart /}\r\n\r\nSample application\r\n------------------\r\n\r\nA sample application can be found in the `samples-and-tests` directory.\r\nIt provides documentation and examples of all supported charts.\r\n\r\nIntroduction\r\n------------\r\n\r\nFor HTML views, an image can be represented as an `img` tag where its\r\n`src` attribute is:\r\n\r\n1.  A Base64-encoded image:\r\n    -   `<img src=\"data:image/png;base64,<base64> <attrs> />`\r\n        -   `<base64>` is a Base64-encoded image\r\n        -   `<attrs>` is a list of `img` attributes besides `src`\r\n\r\n2.  An image URL:\r\n    -   `<img src=\"<url>\" <attrs> />`\r\n        -   `<url>` is the URL of an image\r\n        -   `<attrs>` is a list of `img` attributes besides `src`\r\n\r\nThe Chart module supports both of the above scenarios. A chart image can\r\nbe generated in both its Base64-encoded and raw forms. These scenarios\r\nare described in the following section.\r\n\r\nUsage\r\n-----\r\n\r\n### Chart as `img` with `src` set to a Base64-encoded image\r\n\r\nIn this scenario, a controller creates (or obtains) a `Chart` instance\r\nand passes it to a view. The view then renders it through a fast tag.\r\n\r\n#### Creating a `Chart` instance in the controller\r\n\r\nA `Chart` can be created using the following idiom (example for a pie\r\nchart):\r\n\r\n    Map<Comparable, Number> dataset = ArrayUtils.toMap(new Object[][] {\r\n            {\"Asia\", 29.5D}, {\"Africa\", 20.4D}, {\"North America\", 16.5D},\r\n            {\"South America\", 12D}, {\"Antarctica\", 9.2D}, {\"Europe\", 6.8D},\r\n            {\"Australia\", 5.9D}});\r\n    PieChartBuilder builder = ChartBuilderFactory.newPieChartBuilder(dataset);\r\n    builder.title(\"Pie\").legend(true).width(700).height(500);\r\n    Chart pieChart = builder.build();\r\n    render(pieChart);\r\n\r\nThe steps are:\r\n\r\n1.  Initialise a dataset that is suitable to the chart. Different chart\r\n    types require different dataset types. In this case, a pie chart\r\n    requires a map of keys and values which will be rendered as its\r\n    slices.\r\n2.  Get a builder for a specific type of chart.\r\n3.  Optionally, configure the builder. In this case, oneâ€™s setting the\r\n    chart title, informing that the legend should be displayed, and\r\n    setting the width and height of the chart image.\r\n4.  Build the chart according to the previously set dataset and optional\r\n    settings.\r\n5.  Pass the chart to the view.\r\n\r\n#### Rendering the `Chart` instance in the view\r\n\r\nA `Chart` can be rendered in a view through the following fast tag:\r\n\r\n    #{chart.img chart: pieChart /}\r\n\r\nThis fast tag will create the chart image and generate an `img` tag with\r\nthe following attributes:\r\n\r\n-   `src` set to the Base64-encoded representation of the chart image\r\n-   `width` set to the width of the chart image (**)\\\r\n    ** `height` set to the height of the chart image (\\*)\r\n\r\n(\\*) These attributes provide rendering hints to the user agent.\r\n\r\nAny other attributes passed to this tag are copied verbatim to the HTML\r\n`img` tag. For example,\r\n\r\n    #{chart.img chart: pieChart, title: \"The pie\" /}\r\n\r\nwill generate an `img` tag similar to the previous one but having the\r\n`title` attribute set.\r\n\r\n### Chart as `img` with `src` set to an image URL\r\n\r\nIn this scenario, a controller creates (or obtains) a `Chart` instance,\r\ncreates its corresponding image and returns it in its raw form i.e. as\r\nPNG bytes, once PNG is the format of chart images.\r\n\r\n#### Creating a `Chart` instance in the controller\r\n\r\nThe steps are similar to the previous scenario, except for the render\r\npart:\r\n\r\n    import static play.modules.chart.ChartResult.renderChart;\r\n    Map<Comparable, Number> dataset = ArrayUtils.toMap(new Object[][] {\r\n            {\"Asia\", 29.5D}, {\"Africa\", 20.4D}, {\"North America\", 16.5D},\r\n            {\"South America\", 12D}, {\"Antarctica\", 9.2D}, {\"Europe\", 6.8D},\r\n            {\"Australia\", 5.9D}});\r\n    PieChartBuilder builder = ChartBuilderFactory.newPieChartBuilder(dataset);\r\n    builder.title(\"Pie\").legend(true).width(700).height(500);\r\n    Chart pieChart = builder.build();\r\n    renderChart(pieChart);\r\n\r\nIn this case, the statically imported `renderChart` method will create\r\nthe chart image and return it in its raw form i.e. as PNG bytes.\r\n\r\n#### Rendering the `Chart` instance in the view\r\n\r\nAssuming `chart()` as the action method calling `renderChart` above, the\r\nview could render the chart image using:\r\n\r\n    <img src=\"{@chart()}\" />\r\n\r\nAdditional information\r\n----------------------\r\n\r\nThe examples above illustrate the idiom used for obtaining a `Chart`\r\ninstance and rendering its image using Base64-encoded and raw forms.\r\n\r\n`ChartBuilderFactory` is the entry point for chart creation. This\r\nfactory provides methods for obtaining builders of all supported charts.\r\n\r\nOnce a builder is obtained, different settings can be configured via its\r\nAPI.\r\n\r\nAdditional information on all supported chart types and builder\r\nconfiguration options can be found in the sample application.","google":"UA-61205906-1","note":"Don't delete this file! It's used internally to help with page regeneration."}