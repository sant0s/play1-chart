h1. Chart

The Chart module allows for easy generation of chart images. The following chart types are supported:

* Bar
* Line
* Pie
* Ring

The format of the images is PNG.

This module makes use of the JFreeChart library.

h2. Quick example

h3. Controller

bc. Map<Comparable, Number> dataset = ArrayUtils.toMap(new Object[][] {
		{"Slice 1", 51}, {"Slice 2", 49}});
Chart pieChart = ChartBuilderFactory.newPieChartBuilder(dataset).build();
render(pieChart);

h3. View

bc. #{chart.img chart: pieChart /}

h2. Sample application

A sample application can be found in the @samples-and-tests@ directory. It provides documentation and examples of all supported charts.

h2. Introduction

For HTML views, an image can be represented as an @img@ tag where its @src@ attribute is:

# A Base64-encoded image:
** @<img src="data:image/png;base64,<base64> <attrs> />@
*** @<base64>@ is a Base64-encoded image
*** @<attrs>@ is a list of @img@ attributes besides @src@
# An image URL:
** @<img src="<url>" <attrs> />@
*** @<url>@ is the URL of an image
*** @<attrs>@ is a list of @img@ attributes besides @src@

The Chart module supports both of the above scenarios. A chart image can be generated in both its Base64-encoded and raw forms. These scenarios are described in the following section.

h2. Usage

h3. Chart as @img@ with @src@ set to a Base64-encoded image

In this scenario, a controller creates (or obtains) a @Chart@ instance and passes it to a view. The view then renders it through a fast tag.

h4. Creating a @Chart@ instance in the controller

A @Chart@ can be created using the following idiom (example for a pie chart):

bc. Map<Comparable, Number> dataset = ArrayUtils.toMap(new Object[][] {
		{"Asia", 29.5D}, {"Africa", 20.4D}, {"North America", 16.5D},
		{"South America", 12D}, {"Antarctica", 9.2D}, {"Europe", 6.8D},
		{"Australia", 5.9D}});
PieChartBuilder builder = ChartBuilderFactory.newPieChartBuilder(dataset);
builder.title("Pie").legend(true).width(700).height(500);
Chart pieChart = builder.build();
render(pieChart);

The steps are:

# Initialise a dataset that is suitable to the chart. Different chart types require different dataset types. In this case, a pie chart requires a map of keys and values which will be rendered as its slices.
# Get a builder for a specific type of chart.
# Optionally, configure the builder. In this case, one's setting the chart title, informing that the legend should be displayed, and setting the width and height of the chart image.
# Build the chart according to the previously set dataset and optional settings.
# Pass the chart to the view.

h4. Rendering the @Chart@ instance in the view

A @Chart@ can be rendered in a view through the following fast tag:

bc. #{chart.img chart: pieChart /}

This fast tag will create the chart image and generate an @img@ tag with the following attributes:

* @src@ set to the Base64-encoded representation of the chart image
* @width@ set to the width of the chart image (*)
* @height@ set to the height of the chart image (*)

(*) These attributes provide rendering hints to the user agent.

Any other attributes passed to this tag are copied verbatim to the HTML @img@ tag. For example,

bc. #{chart.img chart: pieChart, title: "The pie" /}

will generate an @img@ tag similar to the previous one but having the @title@ attribute set.

h3. Chart as @img@ with @src@ set to an image URL

In this scenario, a controller creates (or obtains) a @Chart@ instance, creates its corresponding image and returns it in its raw form i.e. as PNG bytes, once PNG is the format of chart images.

h4. Creating a @Chart@ instance in the controller

The steps are similar to the previous scenario, except for the render part:

bc. import static play.modules.chart.ChartResult.renderChart;
Map<Comparable, Number> dataset = ArrayUtils.toMap(new Object[][] {
		{"Asia", 29.5D}, {"Africa", 20.4D}, {"North America", 16.5D},
		{"South America", 12D}, {"Antarctica", 9.2D}, {"Europe", 6.8D},
		{"Australia", 5.9D}});
PieChartBuilder builder = ChartBuilderFactory.newPieChartBuilder(dataset);
builder.title("Pie").legend(true).width(700).height(500);
Chart pieChart = builder.build();
renderChart(pieChart);

In this case, the statically imported @renderChart@ method will create the chart image and return it in its raw form i.e. as PNG bytes.

h4. Rendering the @Chart@ instance in the view

Assuming @chart()@ as the action method calling @renderChart@ above, the view could render the chart image using:

bc. <img src="{@chart()}" />

h2. Additional information

The examples above illustrate the idiom used for obtaining a @Chart@ instance and rendering its image using Base64-encoded and raw forms.

@ChartBuilderFactory@ is the entry point for chart creation. This factory provides methods for obtaining builders of all supported charts.

Once a builder is obtained, different settings can be configured via its API.

Additional information on all supported chart types and builder configuration options can be found in the sample application.
